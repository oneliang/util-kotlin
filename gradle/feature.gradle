apply plugin: 'java'
apply plugin: 'kotlin'

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/kotlin'
        }
//        resources {
//            srcDir 'src/main/resources'
//        }
    }
    test {
        java {
            srcDir 'src/test/kotlin'
        }
    }
}

def generateJarName(Project project) {
    def jarName = ""
    def parentProject = project.parent
    if (parentProject) {//&& parentProject != rootProject) {
        jarName += generateJarName(project.parent) + "-"
    }
    jarName += project.name
    return jarName
}

jar.baseName = generateJarName(project)
println("project name:" + project.name + ", jar name:" + jar.baseName)

apply from: "${rootDir}/gradle/feature-dependencies.gradle"
apply from: "${rootDir}/gradle/feature-test-dependencies.gradle"

dependencies {
}

task checkKotlinCode() {
    println("----------check kotlin code, project:" + project.name + "----------")
    def kotlinMainSourceSets = project.sourceSets['main'].kotlin
    def wrongPackageKotlinFileList = []
    for (kotlinFile in kotlinMainSourceSets) {
        def lines = kotlinFile.readLines()
        if (lines.size > 0) {
            def packageName = ''
            for (line in lines) {
                if (line.indexOf('package ') == 0) {
                    packageName = line
                    break;
                }
            }
            if (!packageName.isBlank()) {
                packageName = packageName.replace('package ', '').replace(';', '')
                def fileString = kotlinFile.absolutePath.replace('\\', '.').replace('/', '.')
                def kotlinPackageFilePath = "$packageName.${kotlinFile.name}"
                if (fileString.lastIndexOf(kotlinPackageFilePath) < 0) {
                    wrongPackageKotlinFileList += kotlinFile
                }
            } else {
                println("Kotlin package is empty, file:$kotlinFile")
            }
        } else {
            println("File is empty, file:$kotlinFile")
        }
    }
    if (wrongPackageKotlinFileList.size > 0) {
        for (wrongKotlinFile in wrongPackageKotlinFileList) {
            println("Kotlin package is wrong, please check package, file:$wrongKotlinFile")
        }
        throw new RuntimeException("Kotlin package error, please see above.")
    }
}

afterEvaluate {
    def buildTask = tasks.findByName("build")
    buildTask.dependsOn(checkKotlinCode)
}